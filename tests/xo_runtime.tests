# -*- tcl -*- Include file for xo.test.
# # ## ### ##### ######## ############# #####################

## Runtime parsing of a command line based on the argument spec.
## Cases to look at:
##
## arguments only
## - required only
## - optional only
## - required + optional
## - splat
##   - especially with optional arguments coming before.
## options only
## - scalar
## - list
## args + options
## - especially splat with options
## state
##
## Take examples from the intended target app
## NOTE: interaction not testable!! linenoise - mockup ?!

# # ## ### ##### ######## ############# #####################
## Group I: 5 parameters, required and optional alternating. Called
## with zero to six arguments.

test xo-runtime-1.0 {required + optional arguments, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    }
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-1.1 {required + optional arguments, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-1.2 {required + optional arguments, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1 2
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-1.3 {required + optional arguments, assignment under thresholding} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1 2 3
} -result {
    A = '1'         v'1'
    B = <undefined> v'0'
    C = '2'         v'2'
    D = <undefined> v'0'
    E = '3'         v'3'
}

test xo-runtime-1.4 {required + optional arguments, assignment under thresholding} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1 2 3 4
} -result {
    A = '1'         v'1'
    B = '2'	    v'2'
    C = '3'	    v'3'
    D = <undefined> v'0'
    E = '4'	    v'4'
}

test xo-runtime-1.5 {required + optional arguments, assignment under thresholding} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1 2 3 4 5
} -result {
    A = '1' v'1'
    B = '2' v'2'
    C = '3' v'3'
    D = '4' v'4'
    E = '5' v'5'
}

test xo-runtime-1.6 {required + optional arguments, too many} -body {
    Parse {
	input A - { validate integer }
	input B - { validate integer; optional ; default 0 }
	input C - { validate integer }
	input D - { validate integer; optional ; default 0 }
	input E - { validate integer }
    } 1 2 3 4 5 6
} -returnCodes error \
    -result "wrong\#args, too many"

# # ## ### ##### ######## ############# #####################
## Group II: Splat arguments, required and optional

test xo-runtime-2.0 {required + required splat, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; validate integer }
    }
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-2.1 {required + required splat, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; validate integer }
    } 1
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-2.2 {required + required splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; validate integer }
    } 1 2
} -result {
    A = '1' v'1'
    B = '2' v'2'
}

test xo-runtime-2.3 {required + required splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; validate integer }
    } 1 2 3
} -result {
    A = '1'   v'1'
    B = '2 3' v'2 3'
}

test xo-runtime-2.4 {required + required splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; validate integer }
    } 1 2 3 4
} -result {
    A = '1'     v'1'
    B = '2 3 4' v'2 3 4'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-2.5 {required + optional splat, not enough} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; optional ; validate integer }
    }
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-2.6 {required + optional splat, empty} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; optional ; validate integer }
    } 1
} -result {
    A = '1'         v'1'
    B = <undefined> v''
}

test xo-runtime-2.7 {required + optional splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2
} -result {
    A = '1' v'1'
    B = '2' v'2'
}

test xo-runtime-2.8 {required + optional splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2 3
} -result {
    A = '1'   v'1'
    B = '2 3' v'2 3'
}

test xo-runtime-2.9 {required + optional splat} -body {
    Parse {
	input A - { validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2 3 4
} -result {
    A = '1'     v'1'
    B = '2 3 4' v'2 3 4'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-2.10 {optional + required splat, not enough} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; validate integer }
    }
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-2.11 {optional + required splat, not enough} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; validate integer }
    } 1
} -result {
    A = <undefined> v'0'
    B = '1'         v'1'
}
test xo-runtime-2.12 {optional + required splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; validate integer }
    } 1 2
} -result {
    A = '1' v'1'
    B = '2' v'2'
}

test xo-runtime-2.13 {optional + required splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; validate integer }
    } 1 2 3
} -result {
    A = '1'   v'1'
    B = '2 3' v'2 3'
}

test xo-runtime-2.14 {optional + required splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; validate integer }
    } 1 2 3 4
} -result {
    A = '1'     v'1'
    B = '2 3 4' v'2 3 4'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-2.15 {optional + optional splat, not enough} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; optional ; validate integer }
    }
} -result {
    A = <undefined> v'0'
    B = <undefined> v''
}

test xo-runtime-2.16 {optional + optional splat, empty} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; optional ; validate integer }
    } 1
} -result {
    A = '1'         v'1'
    B = <undefined> v''
}

test xo-runtime-2.17 {optional + optional splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2
} -result {
    A = '1' v'1'
    B = '2' v'2'
}

test xo-runtime-2.18 {optional + optional splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2 3
} -result {
    A = '1'   v'1'
    B = '2 3' v'2 3'
}

test xo-runtime-2.19 {optional + optional splat} -body {
    Parse {
	input A - { optional ; validate integer }
	input B - { list ; optional ; validate integer }
    } 1 2 3 4
} -result {
    A = '1'     v'1'
    B = '2 3 4' v'2 3 4'
}

# # ## ### ##### ######## ############# #####################
## Group III: Options.

test xo-runtime-3.0 {options, simple, boolean} -body {
    Parse {
	option A -
    }
} -result {
    A = <undefined> v'no'
}

test xo-runtime-3.1 {options, simple, boolean} -body {
    Parse {
	option A -
    } -A 1
} -result {
    A = '1' v'1'
}

test xo-runtime-3.2 {options, simple, boolean} -body {
    Parse {
	option A -
    } -A 0
} -result {
    A = '0' v'0'
}

test xo-runtime-3.2 {options, simple, boolean, multiple use} -body {
    Parse {
	option A -
    } -A 0 -A 1
} -result {
    A = '1' v'1'
}

test xo-runtime-3.3 {options, simple, boolean, special forms} -body {
    Parse {
	option A -
	option B -
	option C -
	option D -
	option E -
	option F -
	option G - { validate identity }
    } -A -G X --no-B -G X -C 1 -D 0 --no-E 1 --no-F 0
} -result {
    A = 'yes' v'yes'
    B = '0'   v'0'
    C = '1'   v'1'
    D = '0'   v'0'
    E = '0'   v'0'
    F = '1'   v'1'
    G = 'X'   v'X'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-3.4 {options, list, string} -body {
    Parse {
	option A - { list ; validate identity }
    }
} -result {
    A = <undefined> v''
}

test xo-runtime-3.5 {options, list, string, missing value} -body {
    Parse {
	option A - { list ; validate identity }
    } -A
} -returnCodes error \
    -result "wrong\#args, not enough"

test xo-runtime-3.6 {options, list, string} -body {
    Parse {
	option A - { list ; validate identity }
    } -A X
} -result {
    A = 'X' v'X'
}

test xo-runtime-3.7 {options, list, string} -body {
    Parse {
	option A - { list ; validate identity }
    } -A X -A Y
} -result {
    A = 'X Y' v'X Y'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-3.8 {options, aliases} -body {
    Parse {
	option A - { validate identity ; alias Z }
    } -A X -Z Y
} -result {
    A = 'Y' v'Y'
}

test xo-runtime-3.9 {options, aliases, list} -body {
    Parse {
	option A - { list ; validate identity ; alias Z }
    } -A X -Z Y
} -result {
    A = 'X Y' v'X Y'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-3.10 {options, long names} -body {
    Parse {
	option ALPHA - { list ; validate identity }
    } --ALPHA Z
} -result {
    ALPHA = 'Z' v'Z'
}

test xo-runtime-3.11 {options, unique prefix expansion} -body {
    Parse {
	option ALPHA - { list ; validate identity }
    } --AL Z
} -result {
    ALPHA = 'Z' v'Z'
}

# # ## ### ##### ######## ############# #####################

test xo-runtime-3.12 {options, unknown option} -body {
    Parse {
	option A - { validate identity }
    } -B Z
} -returnCodes error \
    -result {Unknown option -B}

test xo-runtime-3.13 {options, ambiguous prefix} -body {
    Parse {
	option ALPHA - { validate identity }
	option ALNUM - { validate identity }
    } --AL Z
} -returnCodes error \
    -result {Ambiguous option prefix --AL, matching --ALNUM, --ALPHA}

# # ## ### ##### ######## ############# #####################
## Group IV: Mix options and arguments.


# # ## ### ##### ######## ############# #####################
## Group V: Optional arguments, via peek+validate


# # ## ### ##### ######## ############# #####################
return
