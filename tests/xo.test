# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0
# # ## ### ##### ######## ############# #####################
## xo.test:  tests for the xo package

kt check Tcl     8.5
kt check tcltest 2

kt require support TclOO
kt require support oo::util 1.2
kt require support struct::queue
kt require support try
kt require support string::token::shell

kt local   support xo::value
kt local   support xo::config
kt local   support xo::actor
kt local   support xo::private
kt local   support xo::officer

kt local   testing xo

# # ## ### ##### ######## ############# #####################
## Basic wrong#args checks.

test xo-1.0 {new, wrong\#args, not enough} -body {
    xo new
} -returnCodes error -result {wrong # args: should be "xo new name spec"}

test xo-1.1 {new, wrong\#args, too many} -body {
    xo new NAME
} -returnCodes error -result {wrong # args: should be "xo new name spec"}

test xo-1.2 {new, wrong\#args, too many} -body {
    xo new NAME SPEC X
} -returnCodes error -result {wrong # args: should be "xo new name spec"}

test xo-1.3 {create, wrong\#args, not enough} -body {
    xo create
} -returnCodes error -result {wrong # args: should be "xo create obj name spec"}

test xo-1.4 {create, wrong\#args, not enough} -body {
    xo create OBJ
} -returnCodes error -result {wrong # args: should be "xo create obj name spec"}

test xo-1.5 {create, wrong\#args, not enough} -body {
    xo create OBJ NAME
} -returnCodes error -result {wrong # args: should be "xo create obj name spec"}

test xo-1.6 {new, wrong\#args, too many} -body {
    xo create OBJ NAME SPEC X
} -returnCodes error -result {wrong # args: should be "xo create obj name spec"}

# # ## ### ##### ######## ############# #####################
## Basic officer, knows nothing. create/new with proper arguments.

test xo-2.0 {new, nothing} -setup {
    set x [xo new foo {}]
} -body {
    list [$x known] [$x hasdefault]
} -cleanup {
    $x destroy
    unset x
} -result {{} 0}

test xo-2.1 {create, nothing} -setup {
    xo create x foo {}
} -body {
    list [x known] [x hasdefault]
} -cleanup {
    x destroy
} -result {{} 0}

# # ## ### ##### ######## ############# #####################
## Hierarchy of actions, aliases, defaults.

test xo-3.0 {hierarchy with defaults, aliases} -setup {
    proc DUMP {o {prefix {}}} {
	set result {}
	if {[$o hasdefault]} {
	    lappend result [list {*}$prefix $o default = [$o default]]
	}
	foreach a [lsort -dict [$o known]] {
	    lappend result [list {*}$prefix $o $a = [$o lookup $a]]
	    set c [$o lookup $a]
	    lappend result {*}[DUMP $c [list $o]]
	}
	return $result
    }
    proc WRAP {list} {
	set p "\n    "
	return ${p}[join $list $p]\n
    }
} -body {
    xo create x foo {
	officer bar {}
	default
	alias snafu
	officer tool {
	    officer pliers {}
	    officer hammer {}
	    default pliers
	}
	alias pliers = tool pliers
    }
    WRAP [DUMP x]
} -cleanup {
    x destroy
    rename DUMP {}
    rename WRAP {}
} -result {
    x default = bar
    x bar = ::oo::Obj28::officer_bar
    x pliers = ::oo::Obj30::officer_pliers
    x snafu = ::oo::Obj28::officer_bar
    x tool = ::oo::Obj28::officer_tool
    x ::oo::Obj28::officer_tool default = pliers
    x ::oo::Obj28::officer_tool hammer = ::oo::Obj30::officer_hammer
    x ::oo::Obj28::officer_tool pliers = ::oo::Obj30::officer_pliers
}

# # ## ### ##### ######## ############# #####################
cleanupTests
