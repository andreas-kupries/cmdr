# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0
# # ## ### ##### ######## ############# #####################
## xo.test:  tests for the xo package

kt check Tcl     8.5
kt check tcltest 2

kt require support TclOO
kt require support oo::util 1.2
kt require support struct::queue
kt require support try
kt require support string::token::shell

kt local   support xo::value
kt local   support xo::config
kt local   support xo::actor
kt local   support xo::private
kt local   support xo::officer

kt local   testing xo

# # ## ### ##### ######## ############# #####################
## Basic wrong#args checks.

test xo-1.0 {new, wrong\#args, not enough} -body {
    xo new
} -returnCodes error \
    -result {wrong # args: should be "xo new name spec"}

test xo-1.1 {new, wrong\#args, too many} -body {
    xo new NAME
} -returnCodes error \
    -result {wrong # args: should be "xo new name spec"}

test xo-1.2 {new, wrong\#args, too many} -body {
    xo new NAME SPEC X
} -returnCodes error \
    -result {wrong # args: should be "xo new name spec"}

test xo-1.3 {create, wrong\#args, not enough} -body {
    xo create
} -returnCodes error \
    -result {wrong # args: should be "xo create obj name spec"}

test xo-1.4 {create, wrong\#args, not enough} -body {
    xo create OBJ
} -returnCodes error \
    -result {wrong # args: should be "xo create obj name spec"}

test xo-1.5 {create, wrong\#args, not enough} -body {
    xo create OBJ NAME
} -returnCodes error \
    -result {wrong # args: should be "xo create obj name spec"}

test xo-1.6 {new, wrong\#args, too many} -body {
    xo create OBJ NAME SPEC X
} -returnCodes error \
    -result {wrong # args: should be "xo create obj name spec"}

# # ## ### ##### ######## ############# #####################
## Basic officer, knows nothing. create/new with proper arguments.

test xo-2.0 {new, nothing} -setup {
    set x [xo new foo {}]
} -body {
    list [$x known] [$x hasdefault]
} -cleanup {
    $x destroy
    unset x
} -result {{} 0}

test xo-2.1 {create, nothing} -setup {
    xo create x foo {}
} -body {
    list [x known] [x hasdefault]
} -cleanup {
    x destroy
} -result {{} 0}

# # ## ### ##### ######## ############# #####################
## Hierarchy of actions, aliases, defaults.

test xo-3.0 {hierarchy: defaults, aliases, descriptions, commons} -setup {
    proc DUMP {o {prefix {}}} {
	# Dumping an officer
	set result {}
	# Description
	lappend result [list {*}$prefix $o desc = [$o description]]
	# Default action, if any.
	if {[$o hasdefault]} {
	    lappend result [list {*}$prefix $o default = [$o default]]
	}
	# Common store
	foreach k [lsort -dict [$o keys]] {
	    lappend result [list {*}$prefix $o $k := [$o get $k]]
	}
	# Delegates - Here all officers.
	foreach a [lsort -dict [$o known]] {
	    lappend result [list {*}$prefix $o $a = [$o lookup $a]]
	    set c [$o lookup $a]
	    lappend result {*}[DUMP $c [list {*}$prefix $o]]
	}
	return $result
    }
    proc WRAP {list} {
	set p "\n    "
	return ${p}[join $list $p]\n
    }
} -body {
    xo create x foo {
	common K D
	description TEST
	officer bar {}
	default
	alias snafu
	officer tool {
	    common U V
	    officer pliers {}
	    officer hammer {}
	    default pliers
	}
	alias pliers = tool pliers
    }
    WRAP [DUMP x]
} -cleanup {
    x destroy
    rename DUMP {}
    rename WRAP {}
} -result {
    x desc = TEST
    x default = bar
    x K := D
    x bar = ::oo::Obj30::officer_bar
    x ::oo::Obj30::officer_bar desc = {}
    x ::oo::Obj30::officer_bar K := D
    x pliers = ::oo::Obj32::officer_pliers
    x ::oo::Obj32::officer_pliers desc = {}
    x ::oo::Obj32::officer_pliers K := D
    x ::oo::Obj32::officer_pliers U := V
    x snafu = ::oo::Obj30::officer_bar
    x ::oo::Obj30::officer_bar desc = {}
    x ::oo::Obj30::officer_bar K := D
    x tool = ::oo::Obj30::officer_tool
    x ::oo::Obj30::officer_tool desc = {}
    x ::oo::Obj30::officer_tool default = pliers
    x ::oo::Obj30::officer_tool K := D
    x ::oo::Obj30::officer_tool U := V
    x ::oo::Obj30::officer_tool hammer = ::oo::Obj32::officer_hammer
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_hammer desc = {}
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_hammer K := D
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_hammer U := V
    x ::oo::Obj30::officer_tool pliers = ::oo::Obj32::officer_pliers
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_pliers desc = {}
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_pliers K := D
    x ::oo::Obj30::officer_tool ::oo::Obj32::officer_pliers U := V
}

# # ## ### ##### ######## ############# #####################
## Error cases of the action DSL.

test xo-4.0 {officer DSL, officer, wrong\#args} -setup {
    xo create x foo {
	officer
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"officer ...\""

test xo-4.1 {officer DSL, officer, wrong\#args} -setup {
    xo create x foo {
	officer foo
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error -match glob \
    -result "wrong # args: should be \"xo::officer create ::oo::*::officer_foo super name actions\""

test xo-4.2 {officer DSL, officer, wrong\#args} -setup {
    xo create x foo {
	officer foo {} x
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error -match glob \
    -result "wrong # args: should be \"xo::officer create ::oo::*::officer_foo super name actions\""

# # ## ### ##### ######## ############# #####################

test xo-4.3 {officer DSL, default, missing previous definition} -setup {
    xo create x foo {
	default
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result {Cannot be used as first command}

test xo-4.4 {officer DSL, default, wrong\#args} -setup {
    xo create x foo {
	default x y
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result {wrong # args: should be "default"}

test xo-4.5 {officer DSL, default, unknown action} -setup {
    xo create x foo {
	default x
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result {Unable to set default, expected action, got "x"}

# # ## ### ##### ######## ############# #####################

test xo-4.6 {officer DSL, alias, wrong\#args} -setup {
    xo create x foo {
	alias
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"alias ...\""

test xo-4.7 {officer DSL, alias, wrong\#args} -setup {
    xo create x foo {
	alias x =
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong#args: should be \"name ?= cmd ?word...??\""

test xo-4.8 {officer DSL, alias, wrong\#args} -setup {
    xo create x foo {
	alias x + a
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong#args: should be \"name ?= cmd ?word...??\""

test xo-4.9 {officer DSL, alias, missing previous definition} -setup {
    xo create x foo {
	alias x
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result {Cannot be used as first command}

test xo-4.10 {officer DSL, alias, missing definition} -setup {
    xo create x foo {
	alias x = y
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result {Expected action name, got "y"}

# # ## ### ##### ######## ############# #####################

test xo-4.11 {officer DSL, description, wrong\#args} -setup {
    xo create x foo {
	description
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"description\""

test xo-4.12 {officer DSL, description, wrong\#args} -setup {
    xo create x foo {
	description a b
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"description\""

# # ## ### ##### ######## ############# #####################

test xo-4.13 {officer DSL, common, wrong\#args} -setup {
    xo create x foo {
	common
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"common data\""

test xo-4.14 {officer DSL, common, wrong\#args} -setup {
    xo create x foo {
	common KEY
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"common data\""

test xo-4.15 {officer DSL, common, wrong\#args} -setup {
    xo create x foo {
	common KEY DATA X
    }
} -body {
    x known
} -cleanup {
    x destroy
} -returnCodes error \
    -result "wrong # args: should be \"common data\""

# # ## ### ##### ######## ############# #####################

# TODO: keys, get (super chain)

# # ## ### ##### ######## ############# #####################

# TODO: privates (argument specifications & runtime parsing)

test xo-6.0 {basic private} -setup {
    proc DUMP {o {prefix {}}} {
	# Dumping a private.
	set result {}
	# Description
	lappend result [list {*}$prefix $o desc = [$o description]]
	# Common store, inherited
	foreach k [lsort -dict [$o keys]] {
	    lappend result [list {*}$prefix $o $k := [$o get $k]]
	}
	# TODO: Arguments.
	return $result
    }
    proc WRAP {list} {
	set p "\n    "
	return ${p}[join $list $p]\n
    }
} -body {
    xo create x foo {
	private bar {
	    description TEST
	} ::snafu
    }
    WRAP [DUMP [x lookup bar] x]
} -cleanup {
    x destroy
    rename DUMP {}
    rename WRAP {}
} -result {
    x ::oo::Obj53::private_bar desc = TEST
}

# # ## ### ##### ######## ############# #####################
cleanupTests
